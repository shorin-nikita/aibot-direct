#!/usr/bin/env python3
"""
ü§ñ AIBot Direct - Auto Setup
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏

–í–µ—Ä—Å–∏—è: 2.0 (Clean)
–ê–≤—Ç–æ—Ä: Shorin Nikita  
–°–∞–π—Ç: https://aibot.direct
"""

import os
import secrets
import subprocess
import sys
import getpass
import re
from pathlib import Path

def print_logo():
    """–ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–æ—Ç–∏–ø"""
    print("""
ü§ñ ======================================
   AIBot Direct - Russian AI Platform
   –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
======================================
""")

def log(message, level="INFO"):
    """–ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    if level == "ERROR":
        print(f"‚ùå {message}")
    elif level == "SUCCESS": 
        print(f"‚úÖ {message}")
    elif level == "WARNING":
        print(f"‚ö†Ô∏è  {message}")
    else:
        print(f"‚ÑπÔ∏è  {message}")

def run_cmd(cmd, show_output=False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        if show_output:
            log(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
        result = subprocess.run(cmd, shell=True, check=True, capture_output=not show_output, text=True)
        return result.returncode == 0
    except subprocess.CalledProcessError:
        return False

def generate_key(length=32):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞"""
    return secrets.token_hex(length)

def generate_password(length=16):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è"""
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    return ''.join(secrets.choice(chars) for _ in range(length))

def validate_email(email):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ email"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_domain(domain):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞"""
    pattern = r'^[a-zA-Z0-9][a-zA-Z0-9.-]*[a-zA-Z0-9]\.[a-zA-Z]{2,}$'
    return re.match(pattern, domain) is not None

def get_input(prompt, validator=None, secret=False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    for _ in range(3):
        if secret:
            value = getpass.getpass(f"{prompt}: ")
        else:
            value = input(f"{prompt}: ").strip()
        
        if not value:
            log("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", "ERROR")
            continue
            
        if validator and not validator(value):
            log("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", "ERROR")
            continue
            
        return value
    
    log("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", "ERROR")
    return None

def setup_firewall():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–æ–≤"""
    log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
    
    commands = [
        "sudo ufw --force enable",
        "sudo ufw allow 80/tcp", 
        "sudo ufw allow 443/tcp",
        "sudo ufw allow ssh"
    ]
    
    for cmd in commands:
        if not run_cmd(cmd):
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {cmd}", "WARNING")
            return False
    
    log("–ü–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (80, 443, SSH)", "SUCCESS")
    return True

def get_config_choice():
    """–í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("""
–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:

1. MINIMAL - N8N + Supabase (–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç)
2. FULL    - –ü–æ–ª–Ω—ã–π AI —Å—Ç–µ–∫ (–≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
""")
    
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
        if choice == "1":
            return "minimal"
        elif choice == "2":
            return "full"
        log("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2", "ERROR")

def collect_data(config):
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = {}
    
    log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è {config.upper()} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data['email'] = get_input("Email –¥–ª—è SSL", validate_email)
    if not data['email']:
        return None
        
    data['n8n_domain'] = get_input("–î–æ–º–µ–Ω –¥–ª—è N8N (–Ω–∞–ø—Ä–∏–º–µ—Ä: n8n.yourdomain.com)", validate_domain)
    if not data['n8n_domain']:
        return None
        
    data['supabase_domain'] = get_input("–î–æ–º–µ–Ω –¥–ª—è Supabase (–Ω–∞–ø—Ä–∏–º–µ—Ä: db.yourdomain.com)", validate_domain)  
    if not data['supabase_domain']:
        return None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è FULL
    if config == "full":
        data['chat_domain'] = get_input("–î–æ–º–µ–Ω –¥–ª—è —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: chat.yourdomain.com)", validate_domain)
        data['flow_domain'] = get_input("–î–æ–º–µ–Ω –¥–ª—è Flowise (–Ω–∞–ø—Ä–∏–º–µ—Ä: flow.yourdomain.com)", validate_domain) 
        data['analytics_domain'] = get_input("–î–æ–º–µ–Ω –¥–ª—è Analytics (–Ω–∞–ø—Ä–∏–º–µ—Ä: analytics.yourdomain.com)", validate_domain)
        
        if not all([data['chat_domain'], data['flow_domain'], data['analytics_domain']]):
            return None
    
    # Supabase –∫–ª—é—á–∏
    log("Supabase API –∫–ª—é—á–∏ (–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–∞: https://supabase.com/docs/guides/self-hosting/docker#generate-api-keys)")
    
    data['jwt_secret'] = get_input("JWT_SECRET (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)", lambda x: len(x) >= 32, secret=True)
    data['anon_key'] = get_input("ANON_KEY", lambda x: len(x) >= 100)
    data['service_role_key'] = get_input("SERVICE_ROLE_KEY", lambda x: len(x) >= 100)
    
    if not all([data['jwt_secret'], data['anon_key'], data['service_role_key']]):
        return None
    
    return data

def create_env(config, data):
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
    log("–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
    
    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
    if os.path.exists('.env'):
        os.rename('.env', '.env.backup')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤
    secrets_data = {
        'n8n_key': generate_key(32),
        'n8n_jwt': generate_key(32), 
        'postgres_pass': generate_password(32),
        'dashboard_pass': generate_password(16),
        'secret_base': generate_key(64)
    }
    
    if config == "full":
        secrets_data.update({
            'neo4j_pass': generate_password(16),
            'clickhouse_pass': generate_password(24),
            'minio_pass': generate_password(24),
            'langfuse_salt': generate_key(32),
            'next_secret': generate_key(32),
            'encryption_key': generate_key(32)
        })
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env
    env_content = f"""# AIBot Direct - Auto Generated Configuration
# –î–∞—Ç–∞: {subprocess.check_output(['date'], shell=True, text=True).strip()}

############
# N8N Configuration
############
N8N_ENCRYPTION_KEY={secrets_data['n8n_key']}
N8N_USER_MANAGEMENT_JWT_SECRET={secrets_data['n8n_jwt']}

############
# Supabase Configuration  
############
POSTGRES_PASSWORD={secrets_data['postgres_pass']}
JWT_SECRET={data['jwt_secret']}
ANON_KEY={data['anon_key']}
SERVICE_ROLE_KEY={data['service_role_key']}
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD={secrets_data['dashboard_pass']}
POOLER_TENANT_ID=1000

############
# Domain Configuration
############
N8N_HOSTNAME={data['n8n_domain']}
SUPABASE_HOSTNAME={data['supabase_domain']}
LETSENCRYPT_EMAIL={data['email']}
"""

    if config == "full":
        env_content += f"""
############
# Full Stack Domains
############
WEBUI_HOSTNAME={data['chat_domain']}
FLOWISE_HOSTNAME={data['flow_domain']}
LANGFUSE_HOSTNAME={data['analytics_domain']}

############
# Additional Services
############
NEO4J_AUTH=neo4j/{secrets_data['neo4j_pass']}
CLICKHOUSE_PASSWORD={secrets_data['clickhouse_pass']}
MINIO_ROOT_PASSWORD={secrets_data['minio_pass']}
LANGFUSE_SALT={secrets_data['langfuse_salt']}
NEXTAUTH_SECRET={secrets_data['next_secret']}
ENCRYPTION_KEY={secrets_data['encryption_key']}
"""
    
    # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    env_content += f"""
############
# Base Configuration
############
POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POOLER_PROXY_PORT_TRANSACTION=6543
POOLER_DEFAULT_POOL_SIZE=20
POOLER_MAX_CLIENT_CONN=100
SECRET_KEY_BASE={secrets_data['secret_base']}
POOLER_DB_POOL_SIZE=5
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443
PGRST_DB_SCHEMAS=public,storage,graphql_public
SITE_URL=http://localhost:3000
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=http://localhost:8000
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=true
STUDIO_DEFAULT_ORGANIZATION=AIBot Direct
STUDIO_DEFAULT_PROJECT=Russian AI Platform
"""
    
    # –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        os.chmod('.env', 0o600)
        log(".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω", "SUCCESS")
        return True
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {e}", "ERROR")
        return False

def start_services(config):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    log("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    profile = "cpu"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CPU
    cmd = f"python3 start_services.py --profile {profile} --environment public"
    
    log(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
    return run_cmd(cmd, show_output=True)

def show_summary(config, data):
    """–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    print(f"""
üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.upper()}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
‚úÖ N8N (–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è): https://{data['n8n_domain']}
‚úÖ Supabase (–ë–∞–∑–∞): https://{data['supabase_domain']}
""")
    
    if config == "full":
        print(f"""‚úÖ –ß–∞—Ç (AI): https://{data['chat_domain']}
‚úÖ Flowise (AI Builder): https://{data['flow_domain']} 
‚úÖ Analytics: https://{data['analytics_domain']}""")
    
    print(f"""
–í–ê–ñ–ù–û:
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
- SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–¥—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –§–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

AIBot Direct –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ü§ñ
""")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_logo()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not os.path.exists('.env.example'):
        log("–§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞", "ERROR")
        sys.exit(1)
    
    try:
        # –≠—Ç–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        log("–≠—Ç–∞–ø 1/5: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        config = get_config_choice()
        
        log("–≠—Ç–∞–ø 2/5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–æ–≤")
        setup_firewall()
        
        log("–≠—Ç–∞–ø 3/5: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")  
        data = collect_data(config)
        if not data:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", "ERROR")
            sys.exit(1)
        
        log("–≠—Ç–∞–ø 4/5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        if not create_env(config, data):
            sys.exit(1)
        
        log("–≠—Ç–∞–ø 5/5: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
        if start_services(config):
            show_summary(config, data)
        else:
            log("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤", "ERROR")
            sys.exit(1)
            
    except KeyboardInterrupt:
        log("\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞", "WARNING") 
        sys.exit(0)
    except Exception as e:
        log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()